cmake_minimum_required(VERSION 3.0)
project(my_program)

# 设置 C++17 标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Debug)
# 查找 OpenMP
find_package(OpenMP REQUIRED)

# 查找 Boost
find_package(Boost REQUIRED COMPONENTS date_time program_options unit_test_framework serialization)

# 查找 Open3D
find_package(Open3D REQUIRED)

# 查找 Eigen
find_package(Eigen3 REQUIRED)


# 查找 teaser++
set(TEASERPP_INCLUDE_DIRS /usr/local/include/teaser)
#set(TEASERPP_LIBRARIES /usr/local/lib/libteaser_registration.so)

# 设置 LZ4 的包含目录和库文件路径
set(LZ4_INCLUDE_DIRS /usr/include)
set(LZ4_LIBRARIES /usr/lib/x86_64-linux-gnu/liblz4.so)



# 设置 CNPY 的包含目录和库文件路径
set(CNPY_INCLUDE_DIRS /usr/local/include)
set(CNPY_LIBRARIES /usr/local/lib/libcnpy.so)

# 设置 ANN 的包含目录和库文件路径
set(ANN_INCLUDE_DIRS /home/liu/ann_1.1.2/include)
set(ANN_LIBRARIES /home/liu/ann_1.1.2/lib/libANN.a)

# 设置 FLANN 的包含目录和库文件路径
set(FLANN_INCLUDE_DIRS /usr/include/flann)
set(FLANN_LIBRARIES /usr/lib/x86_64-linux-gnu/libflann.so)

find_package(PCL 1.10 REQUIRED)
# 包含头文件目录
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${Boost_INCLUDE_DIRS}   # Boost 的包含目录
    ${Open3D_INCLUDE_DIRS}  # Open3D 的包含目录
    ${EIGEN3_INCLUDE_DIRS}  # Eigen 的包含目录
	${TEASERPP_INCLUDE_DIRS}
	${LZ4_INCLUDE_DIRS}
	${CNPY_INCLUDE_DIRS}
	${ANN_INCLUDE_DIRS}
	${FLANN_INCLUDE_DIRS}
	${PCL_INCLUDE_DIRS}
	
	
)
# 源文件
set(SRCS main.cpp Registration.cpp)

# 可执行文件名
set(TARGET direct_alignment)

# 添加可执行文件
add_executable(${TARGET} ${SRCS})

# 链接 OpenMP 库
target_link_libraries(${TARGET} OpenMP::OpenMP_CXX)

# 链接 Boost 库
target_link_libraries(${TARGET} ${Boost_LIBRARIES})

# 链接 Open3D 库
target_link_libraries(${TARGET} ${Open3D_LIBRARIES})

# 链接 Eigen 库
target_link_libraries(${TARGET} Eigen3::Eigen)

# 链接 teaser++ 库
target_link_libraries(${TARGET} teaser_io teaser_registration)

# 链接 LZ4 库
target_link_libraries(${TARGET} ${LZ4_LIBRARIES})

# 链接 CNPY 库
target_link_libraries(${TARGET} ${CNPY_LIBRARIES})

# 链接 ANN 库
target_link_libraries(${TARGET} ${ANN_LIBRARIES})

target_link_libraries(${TARGET} ${FLANN_LIBRARIES})

target_link_libraries(${TARGET} ${PCL_LIBRARIES})
# 链接其他可能需要的库


target_link_libraries(${TARGET} stdc++fs) # 如果使用了文件系统库

